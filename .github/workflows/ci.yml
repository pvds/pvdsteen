name: Build & Deploy

env:
    BUN_VERSION: 1.2.22
    BUILD_DIR_STAGING: ./build/staging
    BUILD_DIR_PRODUCTION: ./build/production

permissions:
    actions: read
    contents: write

on:
    push:
        branches: [main]
        paths-ignore:
            - "docs/**"
            - "src/data/generated/**"
            - "*.md"
            - ".env.example"
            - ".gitignore"
            - "lefthook.yml"
            - "favicons.json"
    pull_request:
        branches: [main]
        paths-ignore:
            - "docs/**"
            - "src/data/generated/**"
            - "*.md"
            - ".env.example"
            - ".gitignore"
            - "lefthook.yml"
            - "favicons.json"
    repository_dispatch:
        types: [ContentUpdate]
    workflow_dispatch:
        inputs:
            deploy_staging:
                description: "Deploy to Staging"
                required: false
                default: false
                type: boolean
            deploy_production:
                description: "Deploy to Production"
                required: false
                default: true
                type: boolean

concurrency:
    # Group by PR number for pull requests, branch name for pushes, or event name for dispatches
    group: "${{ github.event.pull_request.number || (github.event_name == 'push' && github.ref_name) || github.event_name }}"
    cancel-in-progress: true

jobs:
    main:
        name: Build and Test
        runs-on: ubuntu-24.04
        env:
            IS_CONTENT_UPDATE: ${{ github.event_name == 'repository_dispatch' }}
            IS_PR: ${{ github.event_name == 'pull_request' }}
            RUN_STAGING:
                ${{ (github.event_name == 'push' && github.ref_name == 'main') || (github.event_name
                == 'pull_request' && github.base_ref == 'main') || (github.event_name ==
                'workflow_dispatch' && github.event.inputs.deploy_staging == 'true') }}
            RUN_PRODUCTION:
                ${{ github.event_name == 'repository_dispatch' || (github.event_name ==
                'workflow_dispatch' && github.event.inputs.deploy_production == 'true') }}
        outputs:
            run_staging: ${{ env.RUN_STAGING }}
            run_production: ${{ env.RUN_PRODUCTION }}
        steps:
            - name: checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1

            - name: setup
              uses: ./.github/actions/setup
              with:
                  bun_version: "${{ env.BUN_VERSION }}"

            - name: check
              if: ${{ env.IS_CONTENT_UPDATE == 'false' }}
              run: bun run check:ci

            - name: content
              run: bun run content
              env:
                  CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
                  CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}

            - name: build
              uses: ./.github/actions/build
              with:
                  run_staging: ${{ env.RUN_STAGING == 'true' }}
                  run_production: ${{ env.RUN_PRODUCTION == 'true' }}
                  build_dir_staging: ${{ env.BUILD_DIR_STAGING }}
                  build_dir_production: ${{ env.BUILD_DIR_PRODUCTION }}

            - name: test
              if: ${{ env.RUN_PRODUCTION == 'true' && env.IS_CONTENT_UPDATE == 'false' }}
              uses: ./.github/actions/test

    staging:
        name: Deploy to Staging
        runs-on: ubuntu-24.04
        needs: main
        if: ${{ needs.main.outputs.run_staging == 'true' && github.event_name != 'pull_request' }}
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        permissions:
            pages: write
            id-token: write
        steps:
            - name: deploy
              id: deployment
              uses: actions/deploy-pages@v4

    production:
        name: Deploy to Production
        runs-on: ubuntu-24.04
        needs: main
        if: ${{ needs.main.outputs.run_production == 'true' }}
        environment:
            name: production
            url: https://mikrouli.org
        steps:
            - name: setup
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: ${{ env.BUN_VERSION }}

            - name: download artifact
              uses: actions/download-artifact@v4
              with:
                  name: production
                  path: ./build

            - name: deploy
              run: >
                  bunx netlify-cli deploy --prod-if-unlocked --dir ./build --message "${{
                  env.DEPLOY_MESSAGE }}"
              env:
                  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
                  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
                  DEPLOY_MESSAGE:
                      ${{ github.event_name == 'repository_dispatch' && 'content update' ||
                      github.event.head_commit.message }}
